#!/usr/bin/env fish
# *****************************************************************************
# Fish startup script
# *****************************************************************************

# If we're in the home directory, make sure that it has the correct case.
if test (string lower $HOME) = (string lower (pwd)) && test $HOME != (pwd)
    cd $HOME
end

# The 077 umask means the following:
#     - Files are created with rw-------
#     - Directories are created with rwx------
#
# For information on setting a system-wide user umask on macOS, see:
#     "Set a custom umask in macOS"
#     <https://support.apple.com/en-us/HT201684>
#
if test (umask) != '0077'
    # The sshd on macOS does not run with umask set to 077, so we'll suppress
    # this warning if this is an ssh session.
    if ! test -e "$SSH_TTY" && isatty
        echo "==================================================================="
        echo "WARNING: umask is not globally set to 077."
        echo
        echo "To resolve, run:":
        echo "    sudo launchctl config user umask 077"
        echo "==================================================================="
    end
    # Using the `umask` command is not a substitute for running the macOS
    # `launchctl` command shown above, but it is better than nothing.
    umask 077
end

# Set up the environment for the brew version of perl, if necessary.
set -q PERL5LIB || begin
{{
    (output `/bin/bash` `-c`
        `/usr/bin/env -i SHELL=fish "$(command -v perl)" "$@"` `argv0`
            (print `-I` .chezmoi.homeDir `/perl5/lib/perl5`)
            (print `-Mlocal::lib=` .chezmoi.homeDir `/perl5`)) | trim | indent 4
}}
end

# Ensure that the correct version of Homebrew appears first in the PATH.
{{ output (print .chezmoi.miscDir `/tools/brew-shellenv.fish`) | trim }}

{{ if eq .chezmoi.arch `arm64` -}}
# Move /usr/local/bin to the end of the PATH on arm64.
# This helps avoid the accidental execution of Intel binaries.
fish_add_path --path --append --move /usr/local/bin
{{- end }}

set -gx EDITOR (path resolve (status dirname)'/run_code_editor_and_wait.fish')
set -gx VISUAL $EDITOR
set -gx MANPAGER (path resolve (status dirname)'/man_pager.fish')
set -gx HOMEBREW_NO_ANALYTICS 1
set -gx GNUTLS_SYSTEM_PRIORITY_FILE "$HOME/.config/gnutls.conf"
set -gx VCPKG_ROOT "$HOME/git/vcpkg"
set -gx PERL_LWP_SSL_CA_FILE '{{ template `brew-root` . }}'/opt/ca-certificates/share/ca-certificates/cacert.pem

# Settings for pass(1).
set -gx PASSWORD_STORE_DIR "$HOME/passwords"
set -gx PASSWORD_STORE_SIGNING_KEY '{{ .gpg.cathySigningKeyFingerprint }}'
set -gx PASSWORD_STORE_ENABLE_EXTENSIONS true

# Settings for rclone(1).
set -gx RCLONE_PASSWORD_COMMAND 'pass rclone-local-config-password.txt'

# Suppress the warning message when invoking /bin/bash.
# See https://support.apple.com/en-us/102360.
set -gx BASH_SILENCE_DEPRECATION_WARNING 1

# See https://stackoverflow.com/a/66900911.
set -gx DOCKER_DEFAULT_PLATFORM linux/amd64

# It is not necessary to invoke `fish_add_path` in this script, because the
# user path automatically persists across fish sessions. However, I'm keeping
# this here so that I don't forget that I added this to the path, in case I
# decide later that I want to remove it.
fish_add_path '{{ template `brew-root` . }}'/opt/ruby/bin
fish_add_path /Library/TeX/texbin

# Enable man(1) to find Puppet's man pages.
add_manpath /opt/puppetlabs/puppet/share/man

set -gx DEVKITPRO /opt/devkitpro
set -gx DEVKITPPC /opt/devkitpro/devkitppc
set -gx HOMEBREW_NO_ENV_HINTS 1
set -gx HOMEBREW_NO_INSECURE_REDIRECT 1
set -gx HOMEBREW_LIVECHECK_WATCHLIST $HOME/.brew_livecheck_watchlist

# See https://learn.microsoft.com/en-us/dotnet/core/tools/telemetry.
set -gx DOTNET_CLI_TELEMETRY_OPTOUT 1

{{ if ne .chezmoi.arch `arm64` -}}
# Number of threads to use when invoking make(1).
# I don't want the system to lock up just because brew is compiling code.
set -gx HOMEBREW_MAKE_JOBS 2
{{- end }}

# Set up gpg-agent and ssh-agent.
set -l parent_command (which (ps -o comm= -p (ps -o ppid= -p $fish_pid)) 2> /dev/null)
if test "$parent_command" != "$(which ssh)"
    set -gx GPG_TTY (tty)
    set -gx GNUPGHOME $HOME/.gnupg
    if test \( -z "$SSH_AUTH_SOCK" \) -o \( -z "$SSH_CLIENT" \)
        set -gx SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)
    end
end

# Remove the fish welcome message.
set fish_greeting